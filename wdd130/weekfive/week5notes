What are some of the things that you can do to share the restored Gospel of Jesus Christ online?"What are our responsibilities as Latter-day Saints in regards to sharing the gospel through the Internet?"

Suppose you want to share an article from the assigned reading in the Prepare section above. What tool is provided to you to share the article?

"hearken to the prompting of the spirit and follow them"

a button whitin a div class that has a link included

Display: flex;
flex-direction: column;

the toolbar remains fixed when you scroll down with the "position: sticky" property.







<table>
  <caption>
    Front-end web developer course 2021
  </caption>
  <thead>
    <tr>
      <th scope="col">Person</th>
      <th scope="col">Most interest in</th>
      <th scope="col">Age</th>
  	  <th colspan="2">the table header</th> <!--this adds to what is in the header at the top of the table -->
    </tr>
  </thead>
  <tbody>
  	<tr>
  		<td>cell 1</td><!--this adds to what is in the body at the top of the table depending on the placement of the html-->
  		<td>cell 2</td>
  	</tr>
  	<tr>
  		<td>cell 3</td>
  		<td rowspan="2">cell 4</td> <!--this makes the box biggerand take up two rows instead of just one -->
  	</tr>
    <tr>
      <th scope="row">Chris</th>
      <td>HTML tables</td>
      <td>22</td>
    </tr>
    <tr>
      <th scope="row">Dennis</th>
      <td>Web accessibility</td>
      <td>45</td>
    </tr>
    <tr>



Css:

table, td {
    border 1px solid #333;
    border-collapse: collaps;
}

    thead,
tfoot {
  background-color: #333;
  color: #fff;
}

th,
td {
  border: 1px solid rgb(160 160 160);
  padding: 0.5rem;
}

caption {
  caption-side: bottom;
  padding: 10px;
  font-weight: 700;
  font-size: smaller;
  color: navy;
  font-variant: small-caps;
}










The components of forms

The typical form has the following five components:

    Structure: This includes the order of fields, the form’s appearance on the page and the logical connections between multiple fields.
    Input fields: These include text fields, password fields, checkboxes, radio buttons, sliders and any other fields designed for user input.

    Field labels: These tell users what the corresponding input fields mean.
    Action button: When the user presses this button, an action is performed (such as submission of the data).

    Feedback: The user is made to understand the result of their input through feedback. Most apps and websites use plain text as a form of feedback. A message will notify the user about the result and can be 
        positive (indicating that the form was submitted successfully) or negative (“The number you’ve provided is incorrect”).

Forms may also have the following components:

    Assistance: This is any explanation of how to fill out the form.

    Validation: This automatic check ensures that the user’s data is valid.

This article covers many aspects related to structure, input fields, labels, action buttons, and validation.



Form structure
    A form is a type of conversation. And like any conversation, it should consist of logical communication between two parties: the user and the app. The form structure defines a skeleton for your form and that is the reason why we explore form best practices in the context of form structure.

    Ask only what’s required
        Make sure to ask only what you really need. Every extra field you add to a form will affect its conversion rate. Always consider why you are requesting certain information from the user and how you will use it.

    Order the form logically
        Ask details logically from the user’s perspective, not from the application or database’s perspective. Typically, asking for someone’s address before their name would be unusual.

    Group related information
        Group related information into logical blocks or sets. The flow from one set of questions to the next will better resemble a conversation. Grouping together related fields will also help users make sense of the information they must fill in. Compare how it works in the contact information form below.





One column vs. multiple columns
    When it comes to web design, designers often experiment with website layouts to convey visual interest for the site’s visitors. However, when it comes to form design, it’s better to resist the temptation to have any layouts that have more than one column.

    One of the problems with arranging form fields into multiple columns is that users will likely interpret the fields inconsistently. If a form has horizontally adjacent fields, then the user must scan in a Z pattern, slowing the speed of comprehension and muddying the path to completion. But if a form is in a single column, the path to completion is a straight line down the page.

    On the left, one of many ways to interpret how the form fields relate when they are arranged in a standard two-column layout, versus on the right, a straight line down the page.




Input fields
    Input fields are what enable users to fill in a form. Various types of fields exist for the information you need: text fields, password fields, dropdowns, checkboxes, radio buttons, date-pickers and more.

    Number of fields
        When it comes to designing forms, a rule of thumb is that shorter is better. And this certainly seems intuitive: less effort on the part of the user will lead to higher conversion. Thus, minimize the number of fields as much as possible. This will make your form feel less bloated, especially when you’re requesting a lot of information. Displaying only five to seven input fields at a given time is a common practice.
    
    Mandatory vs. optional
        Try to avoid optional fields in forms. But if you use them, at least clearly distinguish which input fields may not be left blank. The convention is to use an asterisk (*) for required fields or the word “optional” for non-required fields (which is preferable in long forms with multiple required fields). If you decide to use an asterisk for mandatory fields, show a hint at the bottom of the form explaining what the asterisk is for.

    Setting default values
        Many best practices for form design stress the risk of using static defaults (predefined values in input fields). It’s better to avoid setting default values unless you believe a large portion of your users (say, 95% of them) will select the same values. People scan online forms quickly, and they don’t spend much time parsing through all of the choices. As a result, they can easily skip something that already has a value.

        But this rule doesn’t apply to smart defaults, which are pre-set values based on available information about the user.  Smart defaults can make form completion faster and more accurate. For example, preselect the user’s country based on geo-location data. Still, use these with caution, because users tend to leave preselected fields as they are.

    Input masks
        Field masking is a technique that helps users format inputted text. A mask appears once a user focuses on a field, and it formats the text automatically as the field is being filled out, helping users to focus on the required data and to more easily notice errors. In the example below, the parentheses, spaces, and dashes are applied automatically as the phone and credit card numbers are entered. This simple technique saves time and effort with phone numbers, credit cards, currencies and more.



    Designing forms for desktop: make form keyboard-friendly
        Users should be able to focus on and edit every field using only the keyboard. Power users, who tend to use the keyboard heavily, should be able to easily tab through and edit fields, all without lifting their fingers off the keyboard. You can find detailed requirements for keyboard interaction in the W3C’s guidelines on design patterns.

    Designing forms for desktop: autofocus for input field
        Autofocusing a field gives the user an indication and a starting point to quickly begin filling out a form. Provide a clear visual signal that focus has moved there, whether by changing color, fading in a box, flashing an arrow, whatever. Amazon’s registration form has both autofocus and visual indicators.

    Designing forms for mobile: match keyboard to input
        Phone users appreciate apps that provide the appropriate keyboard for the text being requested. Implement this consistently throughout the app, rather than merely for certain tasks but not others.
    
    Limit typing (autocompletion)
        With more and more people using  mobile screens, anything that can be done to prevent unnecessary typing will improve the user experience and decrease errors. Autocompletion makes it possible to eliminate a huge amount of typing. For example, filling out an address field is often the most problematic part of any registration form. A tool such as Place Autocomplete Address Form (which uses both geolocation and address prefilling to provide accurate suggestions based on the user’s exact location) enables users to enter their address with fewer keystrokes than regular input fields.




Labels
    Written labels are one of the primary ways to make a UI more accessible. A good label tells the user the purpose of the field, maintains its usefulness when the focus is on the field itself and remains visible even after the field has been filled in.

    Number of words
        Use succinct, short, descriptive labels (a word or two) so that users can quickly scan your form. Previous versions of Amazon’s registration form contained a lot of words, which resulted in slow completion rates. The current version is much better and has short labels.

    Sentence case vs. title case
        In most digital products today, there are two ways to capitalize words:

            Title case: capitalize every word. “This Is Title Case.”
            Sentence case: capitalize the first word. “This is sentence case.”
        Sentence case used for labels has one advantage over title case: It is slightly easier (and, thus, faster) to read. While the difference for short labels is negligible (“Full Name” and “Full name”), for longer labels, sentence case is better. Now You Know How Difficult It Is to Read Long Text in Title Case.

    Avoid all caps
        Never use all caps, or else the form will be difficult to read and much harder to scan because there will be no variation in character height.
    
    Alignment of labels: left vs. right vs. top
        Matteo Penzo’s 2006 article on label placement suggests that forms are completed faster if labels are on top of the fields. Top-aligned labels are good if you want users to scan the form as quickly as possible.

        The biggest advantage of top-aligned labels is that different-sized labels and localized versions can more easily fit the UI. (This is especially good for screens with limited space.)

        The biggest disadvantage of left-aligned labels is that it has the slowest completion times. This is likely because of the visual distance between the label and the input field. The shorter the label, the further away it will be from the input. However, a slow completion rate isn’t always a bad thing, especially if the form asks for sensitive data. If you are asking for something like a driver’s license number or a social security number, you might deliberately want to slow down users a bit to make sure they enter it correctly. Thus, the time spent reading labels for sensitive data is insignificant. Left-aligned labels have another disadvantage: They require more horizontal space, which might be a problem for mobile users.

        The big advantage of right-aligned labels is the strong visual connection between the label and input. Items near each other appear to be related. This principle isn’t new; it derives from the law of proximity, from Gestalt psychology. For short forms, right-aligned labels can have great completion times. The disadvantage is discomfort; such forms lack that hard left edge, which makes it less comfortable to look at and harder to read.



        Takeaway: If you want users to scan a form quickly, put labels above the fields. The layout will be easier to scan because the eye will move straight down the page. However, if you want users to read carefully, put labels to the left of the fields. This layout will slow down the reader and make them scan in a Z-shaped motion.

    Inline labels (placeholder text)
        A label set as a placeholder in an input field will disappear once the field gains focus; the user will no longer be able to view it. While placeholder text might work for two-field forms (a simple log-in form with username and password fields), it’s a poor substitute for visual labels when more information is required from the user.

        Once the user clicks on the input field, the label will disappear, and so the user cannot double-check that they wrote what was being asked of them. This increases the chance of error. Another problem is that users could mistake placeholder text for prefilled data and, hence, ignore it (as Nielsen Norman Group’s eye-tracking study confirms).

        A good solution for placeholder text is a floating label. The placeholder text would be shown by default, but once an input field is tapped and text is entered, the placeholder text fades out and a top-aligned label animates in.


        Takeaway: Don’t just rely on placeholders; include a label as well, because once a field has been filled out, the placeholder will no longer be visible. Use a floating label so that users are sure they’ve filled out the correct field.



Action buttons
    When clicked, an action button triggers some activities, such as submission of the form.

    Primary vs. secondary actions
        A lack of visual distinction between primary and secondary actions can easily lead to failure. Best practices for form design says that reducing the visual prominence of secondary actions minimizes the risk of error and reinforces people’s path to a successful outcome.

    Button location
        Complex forms usually need a back button. If such a button is located right below an input field (like in the first screenshot below), a user could accidentally click it. Because the back button is a secondary action, make it less accessible (the second form below has the right location for buttons).

    Naming conventions
        Avoid generic words such as “Submit” for actions, because they give the impression that the form itself is generic. Instead, state what action the button will perform when clicked, such as “Create an account” or “Subscribe to weekly offers.”

    Multiple action buttons
        Avoid multiple action buttons because they might distract users from their goal of submitting the form.

    The reset button is pure evil
        Almost all best practices for form design stress the importance of skipping a reset button. This button rarely helps users and often hurts them. The web would be a happier place if almost all reset buttons were removed.

    Visual appearance
        Make sure action buttons look like buttons: Indicate that it is possible to click or tap them.

    Visual feedback
        Design the “Submit” button in a way that clearly indicates the form is being processed after the user’s action. This provides feedback to the user while preventing double submission.

Validation
    Form validation errors are inevitable and are a natural part of data entry (because users are prone to making errors). Yes, error-prone conditions should be minimized, but validation errors will never be eliminated. So, the most important question is, How do you make it easy for the user to recover from errors?

    Inline validation
        Users dislike having to go through the process of filling out a form, only to find out upon submission that they’ve made an error. Especially frustrating is completing a long form and upon pressing “Submit,” you are rewarded with multiple error messages. It’s even more annoying when it isn’t clear what errors you’ve committed and where.

        Inline validation forms can let a user know what still needs to be done by them.
        What happens without inline validation. Image credit Stack Exchange.

        Validation should inform users about the correctness of the text as soon as the user has inputted the data. The primary principle of good form validation is this: Talk to the user! Tell them what is wrong using the right words and color palettes. Real-time inline validation immediately informs the user about the correctness of their data. This approach allows them to correct any errors faster, without having to wait until they press the “Submit” button to see the errors.

        However, avoid validating each keystroke because, in most cases, you simply cannot verify until someone has finished typing an answer. Forms that validate during data entry punish the user as soon as they start entering data.

        On the other hand, forms that validate after data entry do not inform the user soon enough that they’ve fixed an error.

        Mihael Konjević, in his article “Inline Validation in Forms: Designing the Experience,” examines different validation strategies and proposes a hybrid strategy to satisfy both sides: Reward early, punish late.

            If the user enters data in a field that was in a valid state (i.e. previously inputted data was valid), then validate after data entry.

            If the user enters data in a field that was in an invalid state (i.e. previously entered data was invalid), then validate during data entry.

Protecting data
    Jef Raskin once said, “The system should treat all user input as sacred.” This is true for forms. It’s great when you start filling in a form and then accidentally refresh the page but the data remains in the fields. Tools like Garlic.js help you to persist a form’s values locally until the form is submitted. This way, users won’t lose any precious data if they accidentally close the tab or browser.

    Conversational interfaces: new ways of designing forms
        Recently, we’ve seen a lot of excitement around conversational interfaces and chatbots. Several trends are contributing to this phenomenon, but one in particular is that people are spending more time on messaging apps than on social networks. This has led to a lot of experimentation with supporting a range of interactions, such as shopping, in threaded conversations, often in a way that mimics messaging. Evan an established element like web forms have undergone a change to adapt to this trend. Designers are looking to transform traditional web forms into interactive conversational interfaces.

        Natural language interface
            Every interface is a conversation. Traditional forms (the ones we design every day) are quite similar to a conversation. The only difference is the way we ask questions. But what if we designed our forms to ask questions in a format that more closely reflects real human (not machine) conversation? So, instead of communicating with a machine on its own inhuman terms, you would interact with it on yours. The form shown below creates a conversational context, facilitating understanding without relying on the traditional elements of web forms (such as labels and input fields).

        Conversational form
            Conversational Form is an open-source concept that easily turns any form on a web page into a conversational interface. It features conversational replacements of all input elements, reusable variables from previous questions, and complete customization and control over the styling. This project represents an interesting shift in how we think about user experiences and interactions, leaning more towards text-based conversation to help users achieve their goals.

Conclusion
    When it comes to designing forms, it’s vital to remember that users can be reluctant to fill out forms, so make the process as easy as possible. Minor changes — such as grouping related fields and indicating what information goes in each field — can significantly increase usability.

    Keep in mind that the best practices for form design both listed in this article and available on website design blogs are only half of the battle. Usability testing is simply indispensable in form design. You also need to test your design with your users. Very often, testing with just a few people or simply asking a colleague to go through a prototype can give you a good insight into how usable a form is.





Type	Description
<input type="text">	Displays a single-line text input field
<input type="radio">	Displays a radio button (for selecting one of many choices)
<input type="checkbox">	Displays a checkbox (for selecting zero or more of many choices)
<input type="submit">	Displays a submit button (for submitting the form)
<input type="button">	Displays a clickable button





------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




Styling web forms
Previous
Overview: Forms
Next
In the previous few articles, we showed how to create web forms in HTML. Now, we'll show how to style them in CSS.

Prerequisites:	A basic understanding of HTML and CSS.
Objective:	To understand the issues behind styling forms, and learn some of the basic styling techniques that will be useful to you.
Challenges in styling form widgets
History
In 1995, the HTML 2 specification introduced form controls (a.k.a. "form widgets", or "form elements"). But CSS wasn't released until late 1996, and wasn't supported by most browsers until years afterward; so, in the interim, browsers relied on the underlying operating system to render form widgets.

Even with CSS available, browser vendors were reluctant at first to make form elements stylable, because users were so accustomed to the looks of their respective browsers. But things have changed, and forms widgets are now mostly stylable, with a few exceptions.

Types of widgets
Easy-to-style
<form>
<fieldset> and <legend>
Single-line text <input>s (e.g. type text, url, email), except for <input type="search">.
Multi-line <textarea>
Buttons (both <input> and <button>)
<label>
<output>
Harder-to-style
Checkboxes and radio buttons
<input type="search">
The article Advanced form styling shows how to style these.

Having internals can't be styled in CSS alone
<input type="color">
Date-related controls such as <input type="datetime-local">
<input type="range">
<input type="file">
Elements involved in creating dropdown widgets, including <select>, <option>, <optgroup> and <datalist>.
<progress> and <meter>
For example, the date picker calendar, and the button on <select> that displays an options list when clicked, can't be styled using CSS alone.

The articles Advanced form styling and How to build custom form controls describe how to style these.

Note: some proprietary CSS pseudo-elements, such as ::-moz-range-track, are capable of styling such internal components, but these aren't consistent across browsers, so aren't very reliable. We will mention these later.

Styling simple form widgets
The "easy-to-style" widgets in the previous section may be styled using techniques from the articles Your first form and CSS building blocks. There are also special selectors — UI pseudo-classes — that enable styling based on the current state of the UI.

We'll walk through an example at the end of this article — but first, here are some special aspects of form styling that are worth knowing about.

Fonts and text
CSS font and text features can be used easily with any widget (and yes, you can use @font-face with form widgets). However, browser behavior is often inconsistent. By default, some widgets do not inherit font-family and font-size from their parents. Many browsers use the system's default appearance instead. To make your forms' appearance consistent with the rest of your content, you can add the following rules to your stylesheet:

CSS
Copy to Clipboard
button,
input,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
}
The inherit property value causes the property value to match the computed value of the property of its parent element; inheriting the value of the parent.

The screenshots below show the difference. On the left is the default rendering of an <input type="text">, <input type="date">, <select>, <textarea>, <input type="submit">, and a <button> in Chrome on macOS, with the platform's default font style in use. On the right are the same elements, with our above style rule applied.

Form controls with default and inherited font families. By default, some types are serif and others are sans serif. Inheriting should change the fonts of all to the parent's font family - in this case a paragraph. Oddly, input of type submit does not inherit from the parent paragraph.
The defaults differed in a number of ways. Inheriting should change their fonts to that of the parent's font family — in this case, the default serif font of the parent container. They all do, with a strange exception — <input type="submit"> does not inherit from the parent paragraph in Chrome. Rather, it uses the font-family: system-ui. This is another reason to use <button> elements over their equivalent input types!

There's a lot of debate as to whether forms look better using the system default styles, or customized styles designed to match your content. This decision is yours to make, as the designer of your site, or web application.

Box sizing
All text fields have complete support for every property related to the CSS box model, such as width, height, padding, margin, and border. As before, however, browsers rely on the system default styles when displaying these widgets. It's up to you to define how you wish to blend them into your content. If you want to keep the native look and feel of the widgets, you'll face a little difficulty if you want to give them a consistent size.

This is because each widget has its own rules for border, padding, and margin. To give the same size to several different widgets, you can use the box-sizing property along with some consistent values for other properties:

CSS
Copy to Clipboard
input,
textarea,
select,
button {
  width: 150px;
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}
In the screenshot below, the left column shows the default rendering of an <input type="radio">, <input type="checkbox">, <input type="range">, <input type="text">, <input type="date">, <select>, <textarea>, <input type="submit">, and <button>. The right column on the other hand shows the same elements with our above rule applied to them. Notice how this lets us ensure that all of the elements occupy the same amount of space, despite the platform's default rules for each kind of widget.

box model properties effect most input types.
What may not be apparent via the screenshot is that the radio and checkbox controls still look the same, but they are centered in the 150px of horizontal space provided by the width property. Other browsers may not center the widgets, but they do adhere to the space allotted.

Legend placement
The <legend> element is okay to style, but it can be a bit tricky to control the placement of it. By default, it is always positioned over the top border of its <fieldset> parent, near the top left corner. To position it somewhere else, for example inside the fieldset somewhere, or near the bottom left corner, you need to rely on the positioning.

Take the following example:


To position the legend in this manner, we used the following CSS (other declarations removed for brevity):

CSS
Copy to Clipboard
fieldset {
  position: relative;
}

legend {
  position: absolute;
  bottom: 0;
  right: 0;
}
The <fieldset> needs to be positioned too, so that the <legend> is positioned relative to it (otherwise the <legend> would be positioned relative to the <body>).

The <legend> element is very important for accessibility — it will be spoken by assistive technologies as part of the label of each form element inside the fieldset — but using a technique like the one above is fine. The legend contents will still be spoken in the same way; it is just the visual position that has changed.

Note: You could also use the transform property to help you with positioning your <legend>. However, when you position it with for example a transform: translateY();, it moves but leaves an ugly gap in the <fieldset> border, which is not easy to get rid of.

A specific styling example
Let's look at a concrete example of how to style an HTML form. We will build a fancy-looking "postcard" contact form; see here for the finished version.

If you want to follow along with this example, make a local copy of our postcard-start.html file, and follow the below instructions.

The HTML
The HTML is only slightly more involved than the example we used in the first article of this guide; it just has a few extra IDs and a heading.

HTML
Copy to Clipboard
<form>
  <h1>to: Mozilla</h1>

  <div id="from">
    <label for="name">from:</label>
    <input type="text" id="name" name="user_name" />
  </div>

  <div id="reply">
    <label for="mail">reply:</label>
    <input type="email" id="mail" name="user_email" />
  </div>

  <div id="message">
    <label for="msg">Your message:</label>
    <textarea id="msg" name="user_message"></textarea>
  </div>

  <div class="button">
    <button type="submit">Send your message</button>
  </div>
</form>

Add the above code into the body of your HTML.

Organizing your assets
This is where the fun begins! Before we start coding, we need three additional assets:

The postcard background — download this image and save it in the same directory as your working HTML file.
A typewriter font: The "Mom's Typewriter" font from dafont.com — download the TTF file into the same directory as above.
A hand-drawn font: The "Journal" font from dafont.com — download the TTF file into the same directory as above.
Your fonts need some more processing before you start:

Go to the fontsquirrel.com Webfont Generator.
Using the form, upload both your font files and generate a webfont kit. Download the kit to your computer.
Unzip the provided zip file.
Inside the unzipped contents you will find some font files (at the time of writing, two .woff files and two .woff2 files; they might vary in the future.) Copy these files into a directory called fonts, in the same directory as before. We are using two different files for each font to maximize browser compatibility; see our Web fonts article for a lot more information.
The CSS
Now we can dig into the CSS for the example. Add all the code blocks shown below inside the <style> element, one after another.

Overall layout
First, we prepare by defining our @font-face rules, and all the basic styles set on the <body> and <form> elements. If the fontsquirrel output was different from what we described above, you can find the correct @font-face blocks inside your downloaded webfont kit, in the stylesheet.css file (you'll need to replace the below @font-face blocks with them, and update the paths to the font files):

CSS
Copy to Clipboard
@font-face {
  font-family: "handwriting";
  src:
    url("fonts/journal-webfont.woff2") format("woff2"),
    url("fonts/journal-webfont.woff") format("woff");
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: "typewriter";
  src:
    url("fonts/momot___-webfont.woff2") format("woff2"),
    url("fonts/momot___-webfont.woff") format("woff");
  font-weight: normal;
  font-style: normal;
}

body {
  font: 1.3rem sans-serif;
  padding: 0.5em;
  margin: 0;
  background: #222;
}

form {
  position: relative;
  width: 740px;
  height: 498px;
  margin: 0 auto;
  padding: 1em;
  box-sizing: border-box;
  background: #fff url(background.jpg);

  /* we create our grid */
  display: grid;
  grid-gap: 20px;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: 10em 1em 1em 1em;
}
Notice that we've used some CSS Grid and Flexbox to lay out the form. Using this we can easily position our elements, including the title and all the form elements:

CSS
Copy to Clipboard
h1 {
  font:
    1em "typewriter",
    monospace;
  align-self: end;
}

#message {
  grid-row: 1 / 5;
}

#from,
#reply {
  display: flex;
}
Labels and controls
Now we can start working on the form elements themselves. First, let's ensure that the <label>s are given the right font:

CSS
Copy to Clipboard
label {
  font:
    0.8em "typewriter",
    sans-serif;
}
The text fields require some common rules. In other words, we remove their borders and backgrounds, and redefine their padding and margin:

CSS
Copy to Clipboard
input,
textarea {
  font:
    1.4em/1.5em "handwriting",
    cursive,
    sans-serif;
  border: none;
  padding: 0 10px;
  margin: 0;
  width: 80%;
  background: none;
}
When one of these fields gains focus, we highlight them with a light grey, transparent, background (it is always important to have focus style, for usability and keyboard accessibility):

CSS
Copy to Clipboard
input:focus,
textarea:focus {
  background: rgb(0 0 0 / 10%);
  border-radius: 5px;
}
Now that our text fields are complete, we need to adjust the display of the single and multiple-line text fields to match, since they won't typically look the same using the defaults.

Tweaking the textareas
<textarea> elements default to being rendered as an inline-block element. The two important things here are the resize and overflow properties. While our design is a fixed-size design, and we could use the resize property to prevent users from resizing our multi-line text field, it is best to not prevent users from resizing a textarea if they so choose. The overflow property is used to make the field render more consistently across browsers. Some browsers default to the value auto, while some default to the value scroll. In our case, it's better to be sure everyone will use auto:

CSS
Copy to Clipboard
textarea {
  display: block;

  padding: 10px;
  margin: 10px 0 0 -10px;
  width: 100%;
  height: 90%;

  border-right: 1px solid;

  /* resize  : none; */
  overflow: auto;
}
Styling the submit button
The <button> element is really convenient to style with CSS; you can do whatever you want, even using pseudo-elements:

CSS
Copy to Clipboard
button {
  padding: 5px;
  font: bold 0.6em sans-serif;
  border: 2px solid #333;
  border-radius: 5px;
  background: none;
  cursor: pointer;
  transform: rotate(-1.5deg);
}

button:after {
  content: " >>>";
}

button:hover,
button:focus {
  background: #000;
  color: #fff;
}